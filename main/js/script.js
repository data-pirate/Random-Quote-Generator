/******************************************
Treehouse FSJS Techdegree:
project 1 - A Random Quote Generator
******************************************/

// For assistance: 
// Check the "Project Resources" section of the project instructions
// Reach out in your Slack community - https://treehouse-fsjs-102.slack.com/app_redirect?channel=chit-chat

/*** 
 * `quotes` array 
***/
const quotes = [
  {
    source: 'Frank Zappa',
    quote: "So many books, so litle time"
  },
  {
    source: 'James Cameron',
    quote: "If you set your goals ridiculously high" +
      "and it's a failure, you will fail above everyone" +
      "else's success. "
  },
  {
    source: 'Bernard M. Baruch',
    quote: "You've gotta dance like there's nobody watching," +
      "Love like you'll never be hurt, " +
      "Sing like there's nobody listening, " +
      "And live like it's heaven on earth."
  },
  {
    source: 'Steve Jobs',
    quote: "Your time is limited, so don't waste it " +
      "living someone else's life. Don't be trapped by " +
      "dogma â€” which is living with the results of other " +
      "people's thinking"
  },
  {
    source: "John Green",
    quote: "I Fell in love the way you fall asleep: slowly, and then all at once.",
    citation: "The Fault In Our Stars",
    year: "2014"
  },
  {
    source: "William Shakespeare",
    quote: "All that glisters is not gold",
    citation: "The Merchant of Venice Act 2, Scence 7"
  },
  {
    source: "Ernest Benn",
    quote: "Politics is the art of looking for trouble, " +
      "finding it everywhere, diagnosing it incorrectly and" +
      " applying the wrong remedies.",
    citation: "'Ernest Benn Quotes.' BrainyQuote.com. BrainyMedia Inc, 2021. 26 August 2021",
    year: "1950",
    tags: ["polictical", "Art", "Trouble"]
  },
  {
    source: "H. L. Mencken",
    quote: "The whole aim of practical politics is to keep " +
    "the populace alarmed (and hence clamorous to be led to " +
      "safety) by menacing it with an endless series of hobgoblins," +
       "all of them imaginary.",
    citation: "'H. L. Mencken Quotes.' BrainyQuote.com. BrainyMedia Inc, 2021. 26 August 2021.",
    year: "1954",
    tags: ["polictical", "Aim", "Safety", "Endless"]
  },
  {
    source: "Michel de Montaigne",
    quote: "Nothing fixes a thing so intensely in the memory as the wish to forget it.",
    citation: "'H. L. Mencken Quotes.' BrainyQuote.com. BrainyMedia Inc, 2021. 26 August 2021.",
    year: "1587",
    tags: ["Wish", "Memory"]
  }

];

/***
 * `shuffle` function
 * to randomize the array and prevent picking of same quote again
 * but sometimes does pick the previous one
 **/
let shuffle = () =>{
  for (let i = 0; i < quotes.length; i++) {
    let idx = Math.floor(Math.random() * i);
    
    // swap the ith index with random index (idx)
    let temp = quotes[i];
    quotes[i] = quotes[idx];
    quotes[idx] = temp;
  }
};




/***
 * `getRandomQuote` function
 * finds the length of the array
 * and picks a random index between 0 to len (exclusive)
 * @returns {object} a random quote object from the quotes array.
***/

let getRandomQuote = () => {
  let len = quotes.length;
  let index = Math.floor(Math.random() * len);
  shuffle();
  return quotes[index];
};



// get the quote , source, year and citation box from the html
const quoteBox = document.querySelector('#quote-box');


/***
 * `printQuote` function
 * makes the paragraph with quote object generated by the 
 * getRandomQuote function
***/
let printQuote = () => {
  // get a random quote
  let rQuote = getRandomQuote();


  // replace the quote with another
  quoteBox.innerHTML = `<p class="quote">${rQuote.quote}</p>`;

  // adding author of the quote
  let src = `<p class='source'> ${rQuote.source}`;

  // checking if there is citaiton property or not
  if (rQuote.citation) {
    src += `<span class='citation'>${rQuote.citation}</span>`;
  }

  // Chcek for year property
  if (rQuote.year) {
    src += `<span class='year'>${rQuote.year}</span>`;
  }

  src += `</p>`;

  // appending the src message to the quoteBox
  quoteBox.innerHTML += src;


  // Chcek for tags property
  if (rQuote.tags) {
    let tags = `<p>Tags - `

    // loop through the tags
    // PS: there can be multiple
    for(let each in rQuote.tags){
      tags += rQuote.tags[each] + ', ';
    }

    // cutting the trailing ', ' from the string
    quoteBox.innerHTML += `${tags.slice(0, -2)}</p>`;
  }
  document.body.style.backgroundColor = getRandomColor();

  // clear the previous timer to start again from
  // 0s once the user clicks on the button
  clearInterval(timer);
  timer = setInterval(printQuote, 5000);
};


/***
 * `getRandomColor` function
 * generators a random color everytime it is called;
 * @returns {color} a random color string in rgb format;
 ***/
function getRandomColor() {

  // hexadecimal numbers
  let letters = "01234567899ABCDEF";
  let color = '#';

  // randomly choosing a digit from the 
  // letters to make string color
  for (let i = 0; i < 6; i++) {
    let index = Math.floor(Math.random() * letters.length);
    color += letters[index];
  }

  return color;
}


// 5s interval to automatically cahange the quote
var timer = setInterval(printQuote, 5000);


/***
 * click event listener for the print quote button
 * DO NOT CHANGE THE CODE BELOW!!
***/

document.getElementById('load-quote').addEventListener("click", printQuote, false);
